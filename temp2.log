        ptr_gSAIGEobj->assignSingleVarianceRatio();
  }else{
        isSingleVarianceRatio = false;
  }
  // initiate chunk information
  unsigned int nchunks = 0; //number of chunks
  unsigned int ichunk = 0; //ith chunk
  unsigned int i1InChunk = 0; //i1th marker in ith chunk
  unsigned int i1 = 0;    // index of Markers (non-URV)
  unsigned int i2 = 0;    // index of Markers (Ultra-Rare Variants, URV)
  unsigned int jm; 


  // cycle for q0 markers
  for(unsigned int i = 0; i < q0; i++)
  {
    // marker-level information
    double altFreq, altCounts, missingRate, imputeInfo;
    std::vector<uint32_t> indexForMissing;
    std::string chr, ref, alt, marker;
    uint32_t pd;
    bool flip = false;
    std::string t_genoIndex_str = t_genoIndex.at(i);
    char* end;
    uint64_t gIndex = std::strtoull( t_genoIndex_str.c_str(), &end,10 );
    std::remove(end);
    bool isOutputIndexForMissing = true;
    bool isOnlyOutputNonZero = false;
    //arma::vec timeoutput1a = getTime();
    
    //if(t_regionTestType == "BURDEN"){
   // 	isOnlyOutputNonZero = true;
    //}

    GVec.resize(t_n);
    GVec.zeros();
    bool isReadMarker = Unified_getOneMarker(t_genoType, gIndex, ref, alt, marker, pd, chr, altFreq, altCounts, missingRate, imputeInfo,
                                          isOutputIndexForMissing, // bool t_isOutputIndexForMissing,
                                          indexForMissing,
                                          isOnlyOutputNonZero, // bool t_isOnlyOutputNonZero,
                                          indexNonZeroVec,
					  GVec,
					  t_isImputation);

   //arma::vec timeoutput2a = getTime();
   //printTime(timeoutput1a, timeoutput2a, "Unified_getOneMarker");

   if(!isReadMarker){
      std::cout << "Reading " <<  i << "th marker failed." << std::endl;
      break;
    }	    
    std::string pds = std::to_string(pd);
    std::string info = chr+":"+std::to_string(pd)+":"+ref+":"+alt;

    double MAF = std::min(altFreq, 1 - altFreq);
    double w0;
    double MAC = MAF * 2 * t_n * (1 - missingRate);   // checked on 08-10-2021
    flip = imputeGenoAndFlip(GVec, altFreq, altCounts, indexForMissing, g_impute_method, g_dosage_zerod_cutoff, g_dosage_zerod_MAC_cutoff, MAC, indexZeroVec, indexNonZeroVec);
     

    arma::uvec indexZeroVec_arma, indexNonZeroVec_arma;
    MAF = std::min(altFreq, 1 - altFreq);
    MAC = std::min(altCounts, t_n *2 - altCounts);
    chrVec.at(i) = chr;
    posVec.at(i) = pds;
    refVec.at(i) = ref;
    altVec.at(i) = alt;
    markerVec.at(i) = marker;             // marker IDs
    infoVec.at(i) = info;                 // marker information: CHR:POS:REF:ALT
    altFreqVec.at(i) = altFreq;           // allele frequencies of ALT allele, this is not always < 0.5.
    missingRateVec.at(i) = missingRate;
    altCountsVec.at(i) = altCounts;
    MACVec.at(i) = MAC;
    MAFVec.at(i) = MAF;
    imputationInfoVec.at(i) = imputeInfo;

    //arma::vec timeoutput3a = getTime();
    //printTime(timeoutput2a, timeoutput3a, "Unified_getOneMarker 2");
   if((missingRate > g_missingRate_cutoff) || (MAF > g_maxMAFLimit) || (MAF < g_marker_minMAF_cutoff) || (MAC < g_marker_minMAC_cutoff) || (imputeInfo < g_marker_minINFO_cutoff)){
      continue;
   }else{ 

    if(isWeightCustomized){
        w0 = t_weight(i);
    }else{
        w0 = boost::math::pdf(beta_dist, MAF);
    }


    indexNonZeroVec_arma = arma::conv_to<arma::uvec>::from(indexNonZeroVec);
    uint nNonZero = indexNonZeroVec_arma.n_elem;

    if(MAC > g_region_minMAC_cutoff){  // not Ultra-Rare Variants

      indicatorVec.at(i) = 1;      
      if(i1InChunk == 0){
        std::cout << "Start analyzing chunk " << ichunk << "....." << std::endl;
      }


      if(t_regionTestType != "BURDEN" || t_isSingleinGroupTest){ //perform single-variant assoc tests 

        if(!isSingleVarianceRatio){	    
          hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC);
        }
      
      
        indexZeroVec_arma = arma::conv_to<arma::uvec>::from(indexZeroVec);
        Unified_getMarkerPval(
                    GVec,
                    false, // bool t_isOnlyOutputNonZero,
          indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, Tstat, gy, varT, altFreq, isSPAConverge, gtildeVec, is_gtilde, true, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec);
        BetaVec.at(i) = Beta * (1 - 2*flip);  // Beta if flip = false, -1 * Beta is flip = true       
        seBetaVec.at(i) = seBeta;       
        pvalVec.at(i) = pval;
        pvalNAVec.at(i) = pval_noSPA;
        TstatVec.at(i) = Tstat * (1 - 2*flip);
        TstatVec_flip.at(i) = Tstat;
        gyVec.at(i) = gy;
        varTVec.at(i) = varT;
        isSPAConvergeVec.at(i) = isSPAConverge;

        if(isCondition){ 	
      	  Beta_cVec.at(i) = Beta_c * (1 - 2*flip);  // Beta if flip = false, -1 * Beta is flip = true
      	  seBeta_cVec.at(i) = seBeta_c;
      	  pval_cVec.at(i) = pval_c;
      	  pvalNA_cVec.at(i) = pval_noSPA_c;
      	  Tstat_cVec.at(i) = Tstat_c * (1 - 2*flip);
      	  varT_cVec.at(i) = varT_c;
	  G1tilde_P_G2tilde_Weighted_Mat.row(i) = G1tilde_P_G2tilde_Vec % w0G2Vec_cond.t() * w0;	
        }
        if(t_regionTestType != "BURDEN"){
          P1Mat.row(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t();
          P2Mat.col(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
	}
     }//if(t_regionTestType != "BURDEN" || t_isSingleinGroupTest){ 

     i1 += 1;
     i1InChunk += 1;
     //arma::vec timeoutput3aa = getTime();
     //printTime(timeoutput3a, timeoutput3aa, "Unified_getOneMarker 3a");
     arma::vec dosage_case, dosage_ctrl;
     if(t_traitType == "binary"){
        dosage_case = GVec.elem(ptr_gSAIGEobj->m_case_indices);
        dosage_ctrl = GVec.elem(ptr_gSAIGEobj->m_ctrl_indices);
        MACcasegroup = arma::accu(dosage_case);
        MACcontrolgroup = arma::accu(dosage_ctrl);	
    }
      //arma::vec timeoutput3ab = getTime();
      //printTime(timeoutput3aa, timeoutput3ab, "Unified_getOneMarker 3b");
      //arma::vec MAFIndicatorVec(maxMAFVec.n_elem);
      MAFIndicatorVec.zeros();
      MAFIndicatorVec.elem( find(maxMAFVec >= MAF) ).ones();	
      annoMAFIndicatorVec.zeros();
      for(unsigned int j = 0; j < q_anno; j++){
        if(annoIndicatorMat(i,j) == 1){
		maxMAFperAnno(j) = std::max(maxMAFperAnno(j), MAF);
		for(unsigned int m = 0; m < q_maf; m++){
			if(MAFIndicatorVec(m) == 1){
  				//arma::vec timeoutput3ab0 = getTime();
				jm = j*q_maf + m;	
				annoMAFIndicatorVec(jm) = 1;
				MAC_GroupVec(jm) = MAC_GroupVec(jm) + MAC;

				if(t_traitType == "binary"){
					MACCase_GroupVec(jm) = MACCase_GroupVec(jm) + MACcasegroup;
					MACControl_GroupVec(jm) = MACControl_GroupVec(jm) + MACcontrolgroup;
					//genoSumMat.col(jm) = genoSumMat.col(jm) + w0*GVec;
				}
				for(unsigned int k = 0; k < nNonZero; k++){	
					genoSumMat(indexNonZeroVec_arma(k), jm) = genoSumMat(indexNonZeroVec_arma(k), jm) + w0*GVec(indexNonZeroVec_arma(k));
				}
	
  //arma::vec timeoutput3ab2 = getTime();
   //      printTime(timeoutput3ab1, timeoutput3ab2, "Unified_getOneMarker 3b2");
				NumRare_GroupVec(jm) = NumRare_GroupVec(jm) + 1;
			}

		}	
        }
      }
  //arma::vec timeoutput3ac = getTime();
   //    printTime(timeoutput3ab, timeoutput3ac, "Unified_getOneMarker 3c");
     annoMAFIndicatorMat.row(i) = annoMAFIndicatorVec.t();
     if(t_regionTestType != "BURDEN" || t_isSingleinGroupTest){
      if(t_traitType == "binary"){
        AF_case = arma::mean(dosage_case) /2;
        AF_ctrl = arma::mean(dosage_ctrl) /2;
        if(flip){
          AF_case = 1-AF_case;
           AF_ctrl = 1-AF_ctrl;
        }
        AF_caseVec.at(i) = AF_case;
        AF_ctrlVec.at(i) = AF_ctrl;
        N_caseVec.at(i) = dosage_case.n_elem;
        N_ctrlVec.at(i) = dosage_ctrl.n_elem;
      }else if(t_traitType == "quantitative"){
        N_Vec.at(i) = t_n;
      }      
     } //if(t_regionTestType != "BURDEN" || t_isSingleinGroupTest){

      //arma::vec timeoutput4a = getTime();
      //printTime(timeoutput3ab, timeoutput4a, "Unified_getOneMarker 3");

    }else{   // Ultra-Rare Variants (URV)
      indicatorVec.at(i) = 2;
      arma::vec MAFIndicatorVec(maxMAFVec.n_elem);
      MAFIndicatorVec.zeros();
      MAFIndicatorVec.elem( find(maxMAFVec >= MAF) ).ones();
      annoMAFIndicatorVec.zeros();
      for(unsigned int j = 0; j < q_anno; j++){
        if(annoIndicatorMat(i,j) == 1){
		maxMAFperAnno(j) = std::max(maxMAFperAnno(j), MAF);
		for(unsigned int m = 0; m < q_maf; m++){
                        if(MAFIndicatorVec(m) == 1){
                        	jm = j*q_maf + m;
				annoMAFIndicatorVec(jm) = 2;
				if(!isWeightCustomized){
				  for(unsigned int k = 0; k < nNonZero; k++){
					genoURMat(indexNonZeroVec_arma(k), jm) = std::max(genoURMat(indexNonZeroVec_arma(k), jm), GVec(indexNonZeroVec_arma(k)));
				  }
					//genoURMat.col(jm) = arma::max(genoURMat.col(jm), GVec);
				}else{

                                  for(unsigned int k = 0; k < nNonZero; k++){
					genoURMat(indexNonZeroVec_arma(k), jm) = genoURMat(indexNonZeroVec_arma(k), jm) + t_weight(i) * (GVec(indexNonZeroVec_arma(k)));
					weightURMat_cnt(indexNonZeroVec_arma(k), jm) = weightURMat_cnt(indexNonZeroVec_arma(k), jm) + 1;
				  }
					//genoURMat.col(jm) = genoURMat.col(jm) + t_weight(i) * GVec; 	
					//GVec.elem(find(GVec > 0)).ones();
				        //weightURMat_cnt.col(jm) = weightURMat_cnt.col(jm) + GVec;	
				}	
				NumUltraRare_GroupVec(jm) = NumUltraRare_GroupVec(jm) + 1;
			}
		}
	}
      }
      annoMAFIndicatorMat.row(i) = annoMAFIndicatorVec.t();

      i2 += 1;
    }
 }//else if((missingRate > g_missingRate_cutoff) || (MAF > g_maxMAFLimit) || (MAF < g_marker_minMAF_cutoff) || (MAC < g_marker_minMAC_cutoff) || (imputeInfo < g_marker_minINFO_cutoff)){
//
    
    if(i1InChunk == m1 ){
      std::cout << "In chunks 0-" << ichunk << ", " << i2 << " markers are ultra-rare and " << i1 << " markers are not ultra-rare." << std::endl;
      if(t_regionTestType != "BURDEN"){
        P1Mat.save(t_outputFile + "_P1Mat_Chunk_" + std::to_string(ichunk) + ".bin");
        P2Mat.save(t_outputFile + "_P2Mat_Chunk_" + std::to_string(ichunk) + ".bin");
      }

      mPassCVVec.push_back(m1);
      ichunk += 1;
      i1InChunk = 0;
      nchunks = nchunks + 1;
    }
    Rcpp::checkUserInterrupt();


} //  for(unsigned int i = 0; i < q0; i++)

//the second last chunk
  if(i1InChunk != 0){
    std::cout << "In chunks 0-" << ichunk << ", " << i2 << " markers are ultra-rare and " << i1 << " markers are not ultra-rare." << std::endl;
    if(t_regionTestType != "BURDEN"){	  
      P1Mat = P1Mat.rows(0, i1InChunk - 1);
      P2Mat = P2Mat.cols(0, i1InChunk - 1);
      P1Mat.save(t_outputFile + "_P1Mat_Chunk_" + std::to_string(ichunk) + ".bin");
      P2Mat.save(t_outputFile + "_P2Mat_Chunk_" + std::to_string(ichunk) + ".bin");
    }
    ichunk = ichunk + 1;
    //}
    mPassCVVec.push_back(i1InChunk);
    nchunks = nchunks + 1; 
    i1InChunk = 0;
  }


//for all UR variants
if(i2 > 0){
  int m1new = std::max(m1, q_anno_maf);
  if(isWeightCustomized){
    weightURMat_cnt.replace(0, 1); 	  
    genoURMat = genoURMat / weightURMat_cnt;
    weightURMat.ones();    
  }

  if(t_regionTestType != "BURDEN"){
    P1Mat.resize(m1new, P1Mat.n_cols);
    P2Mat.resize(P2Mat.n_rows,m1new);
  }

  arma::mat XV, XXVX_inv;
  ptr_gSAIGEobj->extract_XV_XXVX_inv(XV, XXVX_inv);
  //the last chunk for UR
  unsigned int i;
  for(unsigned int j = 0; j < q_anno; j++){
     for(unsigned int m = 0; m < q_maf; m++){
	jm = j*q_maf+m;
	arma::vec genoURVec = genoURMat.col(jm);
	int n = genoURVec.size();
	arma::uvec indexForNonZero = arma::find(genoURVec != 0);
	i = q0 + jm;
	markerVec.at(i) = "UR";             // marker IDs
	if(indexForNonZero.n_elem > 0){
	//URindVec.push_back(jm+1);
	  double altFreq = arma::mean(genoURVec)/2;
	  double altCounts = arma::accu(genoURVec);
	  double missingRate = 0;
	  double imputeInfo = 1;
    	  std::string chr, ref, alt, marker;
    	  bool flip = false;
	  std::string info = "UR";	
    	  double MAF = std::min(altFreq, 1 - altFreq);
	  double w0;
	  double MAC = MAF * 2 * t_n * (1 - missingRate);
	  //std::vector<uint32_t> indexForMissing;
    	  //flip = imputeGenoAndFlip(genoURVec, altFreq, altCounts, indexForMissing, g_impute_method, g_dosage_zerod_cutoff, g_dosage_zerod_MAC_cutoff, MAC, indexZeroVec, indexNonZeroVec);
	  if(isWeightCustomized){
	    //genoSumMat.col(jm) = genoSumMat.col(jm) + genoURVec % (weightURMat.col(jm));
	    //genoSumMat.col(jm) = genoSumMat.col(jm) + genoURVec;
	      for(unsigned int k = 0; k < indexForNonZero.n_elem; k++){
                genoSumMat(indexForNonZero(k), jm) = genoSumMat(indexForNonZero(k), jm) + genoURVec(indexForNonZero(k));
	      }
    	  }else{
               w0 = boost::math::pdf(beta_dist, MAF);
	       for(unsigned int k = 0; k < indexForNonZero.n_elem; k++){
                genoSumMat(indexForNonZero(k), jm) = genoSumMat(indexForNonZero(k), jm) + genoURVec(indexForNonZero(k)) * w0;
	      }
    	  }

  	 if(t_regionTestType != "BURDEN"){
	    arma::vec genoSumMatvec1 = genoSumMat.col(jm);
	    arma::vec genoSumMatvec2 = XV * genoSumMatvec1;
	    arma::vec genoSumMatvec3 = genoSumMatvec1 - XXVX_inv * genoSumMatvec2;
	    genoSumMat.col(jm) = genoSumMatvec3;
          }

	  MAC = MAF * 2 * t_n * (1 - missingRate);   // checked on 08-10-2021
	
	  if(t_regionTestType != "BURDEN" || t_isSingleinGroupTest){
	    if(!isSingleVarianceRatio){	
        	hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC);
  	    }
	    annoMAFIndicatorVec.zeros();
	    annoMAFIndicatorVec(jm) = 1;
	    annoMAFIndicatorMat.row(i) = annoMAFIndicatorVec.t();
    	    infoVec.at(i) = info;                 // marker information: CHR:POS:REF:ALT
    	    altFreqVec.at(i) = altFreq;	// allele frequencies of ALT allele, this is not always < 0.5.
	    altCountsVec.at(i) = altCounts;
	    missingRateVec.at(i) = missingRate;
    	    MACVec.at(i) = MAC;
    	    MAFVec.at(i) = MAF;

            arma::uvec indexZeroVec_arma, indexNonZeroVec_arma;
            indexZeroVec_arma = arma::conv_to<arma::uvec>::from(indexZeroVec);
            indexNonZeroVec_arma = arma::conv_to<arma::uvec>::from(indexNonZeroVec);

            ptr_gSAIGEobj->getMarkerPval(genoURVec, indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, altFreq, Tstat, gy, varT, isSPAConverge, gtildeVec, is_gtilde, true, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec);


            BetaVec.at(i) = Beta* (1 - 2*flip);
            seBetaVec.at(i) = seBeta;
            pvalVec.at(i) = pval;
            pvalNAVec.at(i) = pval_noSPA;
            TstatVec.at(i) = Tstat * (1 - 2*flip);
            TstatVec_flip.at(i) = Tstat;
            gyVec.at(i) = gy;
            varTVec.at(i) = varT;
            isSPAConvergeVec.at(i) = isSPAConverge;
            if(isCondition){
              Beta_cVec.at(i) = Beta_c * (1 - 2*flip);  // Beta if flip = false, -1 * Beta is flip = true
              seBeta_cVec.at(i) = seBeta_c;
              pval_cVec.at(i) = pval_c;
              pvalNA_cVec.at(i) = pval_noSPA_c;
              Tstat_cVec.at(i) = Tstat_c * (1 - 2*flip);
              varT_cVec.at(i) = varT_c;
              G1tilde_P_G2tilde_Weighted_Mat.row(i) = G1tilde_P_G2tilde_Vec % w0G2Vec_cond.t() * w0;
            }

    	    chrVec.at(i) = "UR";
    	    posVec.at(i) = "UR";
    	    refVec.at(i) = "UR";
    	    altVec.at(i) = "UR";
    	    markerVec.at(i) = regionName + ":" + annoStringVec.at(j) + ":" + std::to_string(maxMAFVec.at(m)) ;
            arma::vec dosage_case, dosage_ctrl;
            MAC_GroupVec(jm) = MAC_GroupVec(jm) + MAC;
            if(t_traitType == "binary"){
                        dosage_case = genoURVec.elem(ptr_gSAIGEobj->m_case_indices);
                        dosage_ctrl = genoURVec.elem(ptr_gSAIGEobj->m_ctrl_indices);
                        MACcasegroup = arma::accu(dosage_case);
                        MACcontrolgroup = arma::accu(dosage_ctrl);
                        MACCase_GroupVec(jm) = MACCase_GroupVec(jm) + MACcasegroup;
                        MACControl_GroupVec(jm) = MACControl_GroupVec(jm) + MACcontrolgroup;
            }

          if(t_traitType == "binary"){
            AF_case = arma::mean(dosage_case) /2;
            AF_ctrl = arma::mean(dosage_ctrl) /2;
            if(flip){
              AF_case = 1-AF_case;
              AF_ctrl = 1-AF_ctrl;
            }
          AF_caseVec.at(i) = AF_case;
          AF_ctrlVec.at(i) = AF_ctrl;
          N_caseVec.at(i) = dosage_case.n_elem;
          N_ctrlVec.at(i) = dosage_ctrl.n_elem;
        }else if(t_traitType == "quantitative"){
          N_Vec.at(i) = n;
        }
      if(t_regionTestType != "BURDEN"){	
        P1Mat.row(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t();
        P2Mat.col(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
      } //if(t_regionTestType != "BURDEN"){
    }//if(t_regionTestType != "BURDEN" || t_isSingleinGroupTest){	



    i1InChunk = i1InChunk + 1;
    i1 = i1 + 1;
    }
   }  
  }


  if(i1InChunk != 0){
    nchunks = nchunks + 1;
    if(t_regionTestType != "BURDEN"){
      P1Mat = P1Mat.rows(0, i1InChunk - 1);
      P2Mat = P2Mat.cols(0, i1InChunk - 1);
//if(nchunks != 1){
      P1Mat.save(t_outputFile + "_P1Mat_Chunk_" + std::to_string(ichunk) + ".bin");
      P2Mat.save(t_outputFile + "_P2Mat_Chunk_" + std::to_string(ichunk) + ".bin");
    }
      ichunk = ichunk + 1;
//    }
    mPassCVVec.push_back(i1InChunk);
  }
   //std::cout << "P1Mat.n_rows ok2 " << P1Mat.n_rows << std::endl; 

  }// if(i2 > 0)    
  int mPassCVVecsize = mPassCVVec.size();
  nchunks = mPassCVVecsize;


arma::mat VarMat;
//(i1, i1);

if(t_regionTestType != "BURDEN"){
  VarMat.resize(i1, i1);	
  if(nchunks == 1){
    VarMat = P1Mat * P2Mat;
  }

  // the region includes more markers than limitation, so P1Mat and P2Mat have been put in hard drive
  if(nchunks > 1)
  {
    int first_row = 0, first_col = 0, last_row = 0, last_col = 0;
    
    for(unsigned int index1 = 0; index1 < nchunks; index1++)
    {
      last_row = first_row + mPassCVVec.at(index1) - 1;
      
      std::string P1MatFile = t_outputFile + "_P1Mat_Chunk_" + std::to_string(index1) + ".bin";
      
        P1Mat.load(P1MatFile);
      
      if(P1Mat.n_cols == 0) continue;
      
      // off-diagonal sub-matrix
      for(unsigned int index2 = 0; index2 < index1; index2++)
      {
        std::cout << "Analyzing chunks (" << index1 << "/" << nchunks - 1 << ", " << index2 << "/" << nchunks - 1 << ")........" << std::endl;
       

        P2Mat.load(t_outputFile + "_P2Mat_Chunk_" + std::to_string(index2) + ".bin");
        
        if(P2Mat.n_cols == 0) continue;
        arma::mat offVarMat = P1Mat * P2Mat;
        last_col = first_col + mPassCVVec.at(index2) - 1;
        
        VarMat.submat(first_row, first_col, last_row, last_col) = offVarMat;
        VarMat.submat(first_col, first_row, last_col, last_row) = offVarMat.t();
        first_col = last_col + 1;
      }
      
      // diagonal sub-matrix
      last_col = first_col + mPassCVVec.at(index1) - 1;
      std::cout << "Analyzing chunks (" << index1 << "/" << nchunks - 1 << ", " << index1 << "/" << nchunks - 1 << ")........" << std::endl;
      //std::cout << "P2Mat.n_cols " << P2Mat.n_cols << std::endl;
      P2Mat.load(t_outputFile + "_P2Mat_Chunk_" + std::to_string(index1) + ".bin");
      
      arma::mat diagVarMat = P1Mat * P2Mat;
      
      VarMat.submat(first_row, first_col, last_row, last_col) = diagVarMat;
      
      first_row = last_row + 1;
      first_col = 0;
      Rcpp::checkUserInterrupt();
    }
     
    for(unsigned int index1 = 0; index1 < nchunks; index1++)
    {
      std::string P1MatFile = t_outputFile + "_P1Mat_Chunk_" + std::to_string(index1) + ".bin";
      std::string P2MatFile = t_outputFile + "_P2Mat_Chunk_" + std::to_string(index1) + ".bin";
      const char* File1 = P1MatFile.c_str();
      const char* File2 = P2MatFile.c_str();
      std::remove(File1);
      std::remove(File2);
    }
    
  }
}  //if(t_regionTestType != "BURDEN"){


//read and test single markers done
//arma::vec timeoutput2 = getTime();
//printTime(timeoutput1, timeoutput2, "read and test single markers done");
//check the max MAF of all markers
//if there are sets containing the same markers
arma::uvec q_maf_for_anno(q_anno);
for(unsigned int j = 0; j < q_anno; j++){
	arma::uvec jtemp = find(maxMAFVec >= maxMAFperAnno(j));
	q_maf_for_anno(j) = jtemp.min();
}


//If only conduct Burden test
arma::vec BURDEN_pval_Vec(q_anno_maf);
BURDEN_pval_Vec.fill(-1.0);
arma::vec BURDEN_pval_cVec(q_anno_maf);
BURDEN_pval_cVec.fill(-1.0);


bool isregion = true;
if(!ptr_gSAIGEobj->m_flagSparseGRM){
	isregion = false;
}
//Rcpp::DataFrame OUT_BURDEN = Rcpp::DataFrame::create();
unsigned int i= 0;
unsigned int q_maf_m;
bool isPolyMarker = true;
std::string AnnoName;
double maxMAFName;
if(t_regionTestType == "BURDEN"){

     for(unsigned int j = 0; j < q_anno; j++){
       q_maf_m = q_maf_for_anno(j);
       AnnoName = annoStringVec[j]; 
       isPolyMarker = true;	
       for(unsigned int m = 0; m < q_maf; m++){
	maxMAFName = maxMAFVec(m); 
	jm = j*q_maf+m;
	i = jm;
      if(m <= q_maf_m){
        arma::vec genoSumVec = genoSumMat.col(jm);
        int n = genoSumVec.size();
        arma::uvec indexNonZeroVec_arma = arma::find(genoSumVec != 0);
	arma::uvec indexZeroVec_arma = arma::find(genoSumVec == 0);
        if(indexNonZeroVec_arma.n_elem > 0){
          double altFreq = arma::mean(genoSumVec)/2;
          double altCounts = arma::accu(genoSumVec);
          double missingRate = 0;
          double imputeInfo = 1;
          std::string chr, ref, alt, marker;
          bool flip = false;
          std::string info = "UR";
          double MAF = std::min(altFreq, 1 - altFreq);
          double w0;
          double MAC = MAF * 2 * t_n * (1 - missingRate);
          std::vector<uint32_t> indexForMissing;
	  if(!isSingleVarianceRatio){
            hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC);
          }
	  
	  //arma::vec timeoutput_getp = getTime();
          ptr_gSAIGEobj->getMarkerPval(genoSumVec, indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, altFreq, Tstat, gy, varT, isSPAConverge, gtildeVec, is_gtilde, isregion, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec);
	  //arma::vec timeoutput_getp2 = getTime();
	  //printTime(timeoutput_getp, timeoutput_getp2, "get p  done");
	  BURDEN_pval_Vec(i) = pval;
	  
	  if(isCondition){
	    BURDEN_pval_cVec(i) = pval_c;
          }
	   OutFile << regionName;
           OutFile << "\t";
	   OutFile << AnnoName;
	   OutFile << "\t";
	   OutFile << maxMAFName;
           OutFile << "\t";
           OutFile << pval; 	   
           OutFile << "\t";
           OutFile << Beta; 	   
           OutFile << "\t";
           OutFile << seBeta; 	   
           OutFile << "\t";
	   if(isCondition){
           OutFile << pval_c; 	   
           OutFile << "\t";
           OutFile << Beta_c; 	   
           OutFile << "\t";
           OutFile << seBeta_c; 	   
           OutFile << "\t";
	   }	
	  
	   OutFile << MAC_GroupVec(i);
	   OutFile << "\t"; 
           if(t_traitType == "binary"){
		OutFile << MACCase_GroupVec(i);
	   	OutFile << "\t"; 
		OutFile << MACControl_GroupVec(i);
	   	OutFile << "\t"; 
	   }
	   OutFile << NumRare_GroupVec(i);
	   OutFile << "\t";
	   OutFile << NumUltraRare_GroupVec(i);
	   OutFile << "\n";
	  //i = i + 1;
         }else{
	   isPolyMarker = false;	 
	   //i = (j+1)*q_maf;
	 }
     }else{
	if(isPolyMarker){
	  BURDEN_pval_Vec(i) = pval;
          //BURDEN_Beta_Vec(i) = Beta;
          //BURDEN_seBeta_Vec(i) = seBeta;
          if(isCondition){
            BURDEN_pval_cVec(i) = pval_c;
          //  BURDEN_Beta_cVec(i) = Beta_c;
          //  BURDEN_seBeta_cVec(i) = seBeta_c;
          }

           OutFile << regionName;
           OutFile << "\t";
           OutFile << AnnoName;
           OutFile << "\t";
           OutFile << maxMAFName;
           OutFile << "\t";
           OutFile << pval;
           OutFile << "\t";
           OutFile << Beta;
           OutFile << "\t";
           OutFile << seBeta;
           OutFile << "\t";
           if(isCondition){
           OutFile << pval_c;
           OutFile << "\t";
           OutFile << Beta_c;
           OutFile << "\t";
           OutFile << seBeta_c;
           OutFile << "\t";
           }

           OutFile << MAC_GroupVec(i);
           OutFile << "\t";
           if(t_traitType == "binary"){
                OutFile << MACCase_GroupVec(i);
                OutFile << "\t";
                OutFile << MACControl_GroupVec(i);
                OutFile << "\t";
           }
           OutFile << NumRare_GroupVec(i);
           OutFile << "\t";
           OutFile << NumUltraRare_GroupVec(i);
	   OutFile << "\n";
	}
     } 	     

       }
     }

     //OUT_BURDEN["Pvalue_Burden"] = BURDEN_pval_Vec;
     //OUT_BURDEN["Beta_Burden"] = BURDEN_Beta_Vec;
     //OUT_BURDEN["seBeta_Burden"] = BURDEN_seBeta_Vec;
     //OUT_BURDEN["Pvalue_Burden_c"] = BURDEN_pval_cVec;
     //OUT_BURDEN["Beta_Burden_c"] = BURDEN_Beta_cVec;
     //OUT_BURDEN["seBeta_Burden_c"] = BURDEN_seBeta_cVec;

           OutFile << regionName;
           OutFile << "\tCauchy\tNA\t";
           //OutFile << AnnoName;
           //OutFile << "\t";
           //OutFile << maxMAFName;
           //OutFile << "\t";
	   //arma::uvec nonMissingPvalVecInd = arma::find(BURDEN_seBeta_Vec > 0);
	   arma::uvec nonMissingPvalVecInd = arma::find(BURDEN_pval_Vec >= 0);
	   arma::vec nonMissingPvalVec = BURDEN_pval_Vec.elem(nonMissingPvalVecInd);
	
	   //nonMissingPvalVec.print("nonMissingPvalVec");	

	   double cctpval = CCT_cpp(nonMissingPvalVec);
           OutFile << cctpval;
           OutFile << "\tNA\tNA\t";
           if(isCondition){
	   arma::vec nonMissingPvalVec_cond = BURDEN_pval_cVec.elem(nonMissingPvalVecInd);
	   double cctpval_cond = CCT_cpp(nonMissingPvalVec_cond);	   
           OutFile << cctpval_cond;
           OutFile << "\tNA\tNA\t";
           }

           OutFile << "NA\t";
           if(t_traitType == "binary"){
                OutFile << "NA\t";
                OutFile << "NA\t";
           }
           OutFile << "NA\t";
           OutFile << "NA\n";

 //arma::vec timeoutput3 = getTime();
 //printTime(timeoutput2, timeoutput3, "burden test done");
 }else{

  q_maf_for_anno = q_maf_for_anno + 1;
  OutList.push_back(MAC_GroupVec, "MAC_GroupVec");
  OutList.push_back(q_maf_for_anno, "q_maf_for_annoVec");
  if(t_traitType == "binary"){
    OutList.push_back(MACCase_GroupVec, "MACCase_GroupVec");
    OutList.push_back(MACControl_GroupVec, "MACCtrl_GroupVec");
    OutList.push_back(genoSumMat, "genoSumMat");
    OutList.push_back(gyVec, "gyVec");
  }

    OutList.push_back(VarMat, "VarMat");	
    OutList.push_back(MAFVec, "MAFVec");	
    OutList.push_back(TstatVec_flip, "TstatVec_flip");	
  //arma::mat scaled_m_VarInvMat_cond;
    if(isCondition){
  //std::cout << "okk5" << std::endl;
      arma::mat AdjCondMat = G1tilde_P_G2tilde_Weighted_Mat * (ptr_gSAIGEobj->m_VarInvMat_cond / (w0G2Mat_cond));
      arma::mat VarMatAdjCond = AdjCondMat * (G1tilde_P_G2tilde_Weighted_Mat.t());
      arma::vec TstatAdjCond = AdjCondMat * (ptr_gSAIGEobj->m_Tstat_cond % w0G2Vec_cond ); 
      OutList.push_back(G1tilde_P_G2tilde_Weighted_Mat, "G1tilde_P_G2tilde_Weighted_Mat"); 
      OutList.push_back(ptr_gSAIGEobj->m_scalefactor_G2_cond, "scalefactor_G2_cond");
      OutList.push_back(ptr_gSAIGEobj->m_VarInvMat_cond_scaled_weighted, "VarInvMat_G2_cond_scaled"); 
      OutList.push_back(ptr_gSAIGEobj->m_Tstat_cond, "Tstat_G2_cond"); //m_Tstat_cond is weighted
      OutList.push_back(ptr_gSAIGEobj->m_G2_Weight_cond, "G2_Weight_cond");
      OutList.push_back(TstatAdjCond, "TstatAdjCond");
      OutList.push_back(VarMatAdjCond, "VarMatAdjCond"); 
    }  

 }

 int numofUR = 0;
 if(t_isSingleinGroupTest){
  OutList.push_back(pvalVec, "pvalVec");
  for(unsigned int k = 0; k < pvalVec.size(); k++){ 
	if(std::isfinite(pvalVec.at(k))){
		if(chrVec.at(k) == "UR"){
			numofUR = numofUR + 1;
		}
		OutFile_singleInGroup << chrVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << posVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << markerVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << refVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << altVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << altCountsVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << altFreqVec.at(k);
		OutFile_singleInGroup << "\t";

		if(t_isImputation){	
			OutFile_singleInGroup << imputationInfoVec.at(k);
			OutFile_singleInGroup << "\t";
		}else{
			OutFile_singleInGroup << missingRateVec.at(k);
			OutFile_singleInGroup << "\t";
			
		}
		OutFile_singleInGroup << BetaVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << seBetaVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << TstatVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << varTVec.at(k);
		OutFile_singleInGroup << "\t";
		OutFile_singleInGroup << pvalVec.at(k);
		OutFile_singleInGroup << "\t";
		
        	if(t_traitType == "binary"){
			OutFile_singleInGroup << pvalNAVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << isSPAConvergeVec.at(k);
			OutFile_singleInGroup << "\t";
		}	
		if(isCondition){
			OutFile_singleInGroup << Beta_cVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << seBeta_cVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << Tstat_cVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << varT_cVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << pval_cVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << pvalNA_cVec.at(k);
			OutFile_singleInGroup << "\t";
		}
		if(t_traitType == "binary"){
			OutFile_singleInGroup << AF_caseVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << AF_ctrlVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << N_caseVec.at(k);
			OutFile_singleInGroup << "\t";
			OutFile_singleInGroup << N_ctrlVec.at(k);
			OutFile_singleInGroup << "\n";
		}else if(t_traitType == "quantitative"){
			OutFile_singleInGroup << N_Vec.at(k);
			OutFile_singleInGroup << "\n";
		
		}
	}
  }
  OutList.push_back(numofUR, "numofUR");

 }

 if(t_isOutputMarkerList){
	OutList.push_back(indicatorVec, "markerIndcatorVec");
 }



  OutList.push_back(NumRare_GroupVec, "NumRare_GroupVec");
  OutList.push_back(NumUltraRare_GroupVec, "NumUltraRare_GroupVec");


 if(t_regionTestType != "BURDEN" || t_isOutputMarkerList){
  OutList.push_back(annoMAFIndicatorMat, "annoMAFIndicatorMat");
 }
  
  return OutList;
 }



 // [[Rcpp::export]]
